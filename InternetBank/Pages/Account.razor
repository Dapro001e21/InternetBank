@page "/Account"
@using System.Security.Claims
@using InternetBank.Models
@using InternetBank.Services
@inject CardsService cardService
@inject NavigationManager navManager

<div class="account">
	<PageTitle>Аккаунт</PageTitle>

	<AuthorizeView>
		<Authorized>
			<h1>Здраствуйте, @Name</h1>
			<button @onclick="async () => await CardCreate()">Выпустить новую карту</button>
			<h2>Ваши карты:</h2>
			<div class="card-container">
				@{
					foreach (var e in allCards)
					{
						<div class="card" @onclick="@(() => LoadCardPage(@e.Id))">
							<h4>Номер карты: @e.Id</h4>
							<div class="money">@e.Money руб.</div>
						</div>
					}
				}
			</div>
		</Authorized>
	</AuthorizeView>
</div>

@code {
	[CascadingParameter] Task<AuthenticationState> auth { get; set; }
	private List<Card> allCards = new();
	public string Name { get; set; }
	public int Id { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var authState = await auth;
		if (!authState.User.Identity.IsAuthenticated)
		{
			navManager.NavigateTo("/", true);
		}
		Name = authState.User.Claims.SingleOrDefault(claim => claim.Type == ClaimTypes.Name)?.Value.ToString();
		Id = Convert.ToInt32(authState.User.Claims.SingleOrDefault(claim => claim.Type == "Id")?.Value.ToString());
		allCards = await cardService.GetCards(Id);
	}

	public void LoadCardPage(int id)
	{
		navManager.NavigateTo($"Card/{id}");
	}

	private async Task CardCreate()
	{
		Card newCard = new Card() { Money = 0, OwnerId = Id };
		if (await cardService.AddCard(newCard))
			allCards = await cardService.GetCards(Id);
	}

}
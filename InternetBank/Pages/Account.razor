@page "/Account"
@using System.Security.Claims
@using InternetBank.Models
@using InternetBank.Services
@inject CardsService cardService
@inject NavigationManager navManager

<PageTitle>Аккаунт</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Здраствуйте, @Name</h1>
		<button @onclick="async () => await CardCreate()">Выпустить новую карту</button>
		<h2>Ваши карты:</h2>
		@{
			if(allCards.Count > 0)
			{
				foreach (var e in allCards)
				{
					<div @onclick="@(() => LoadCardPage(@e.Id))" style="border-radius: 10px; height: 100px; width: 200px; background-color: lightblue; margin: 5px; padding:10px">
						<h5>Id:@e.Id</h5>
						<div style="font-size: large; text-align: center">@e.Money rub.</div>
					</div>
				}
			}
			else
			{
				<h3>Загрузка...</h3>
			}
		}
    </Authorized>
</AuthorizeView>

@code {
	[CascadingParameter] Task<AuthenticationState> auth { get; set; }
	private List<Card> allCards = new();
	public string Name { get; set; }
	public int Id { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var authState = await auth;
		if (!authState.User.Identity.IsAuthenticated)
		{
			navManager.NavigateTo("/", true);
		}
		Name = authState.User.Claims.SingleOrDefault(claim => claim.Type == ClaimTypes.Name)?.Value.ToString();
		Id = Convert.ToInt32(authState.User.Claims.SingleOrDefault(claim => claim.Type == "Id")?.Value.ToString());
		allCards = await cardService.GetCards(Id);
	}

	public void LoadCardPage(int id)
	{
		navManager.NavigateTo($"Card/{id}");
	}

	private async Task CardCreate()
	{
		Card newCard = new Card() { Money = 0, OwnerId = Id };
		if (await cardService.AddCard(newCard))
			allCards = await cardService.GetCards(Id);
	}

}
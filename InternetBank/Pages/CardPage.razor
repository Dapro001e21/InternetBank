@page "/Card/{cardId:int}"
@using InternetBank.Models
@using System.Security.Claims
@using InternetBank.Services
@using System.ComponentModel.DataAnnotations;
@inject CardsService cardService
@inject TransactionsService tranService
@inject NavigationManager navManager

<PageTitle>Карта</PageTitle>

<h1>Номер карты: @thisCard.Id</h1>
<h2>Баланс: @thisCard.Money</h2>
<div class="cardPage">
	<fieldset>
		<legend>Перевод по:</legend>
		<InputRadioGroup @bind-Value="IsEmail">
			<div>
				<InputRadio id="email" Value="true" />
				<label for="email">Почте</label>
			</div>
			<div>
				<InputRadio id="card" Value="false" />
				<label for="card">Номеру карты</label>
			</div>
		</InputRadioGroup>
	</fieldset>
	<div class="content">
		@{
			if (IsEmail)
			{
				<EditForm Model="@DataModel" OnValidSubmit="SendMoney">
					<DataAnnotationsValidator />
					<div class="form-block">
						<span>Введите почту:</span>
						<InputText @bind-Value="DataModel.ReceiverEmail" />
						<button type="button" @onclick="GetCardsReceiver">Показать карты</button>
						<ValidationMessage For="@(() => DataModel.ReceiverEmail)" />
					</div>
					<div class="form-block">
						@{
							if (DataModel.ReceiverCards.Count > 0)
							{
								<InputSelect @bind-Value="DataModel.RecieverIdCard">
									@foreach (var card in DataModel.ReceiverCards)
									{
										<option value="@card.Id">Id: @card.Id</option>
									}
								</InputSelect>
								<ValidationMessage For="@(() => DataModel.RecieverIdCard)" />
							}
						}
					</div>
					<div class="form-block">
						<span>Сумма:</span>
						<InputNumber @bind-Value="transaction.Money"></InputNumber>
						<button type="submit">Перевести</button>
						<p class="validation-message">@ErrorMessage</p>
					</div>
				</EditForm>
			}
			else
			{
				<EditForm Model="@DataModel" OnSubmit="SendMoney">
					<div class="form-block">
						<span>Номер карты:</span>
						<InputNumber @bind-Value="DataModel.RecieverIdCard"></InputNumber>
					</div>
					<div class="form-block">
						<span>Сумма:</span>
						<InputNumber @bind-Value="transaction.Money"></InputNumber>
						<button type="submit">Перевести</button>
					</div>
					<p class="validation-message">@ErrorMessage</p>
				</EditForm>
			}
		}
	</div>
	<div class="transictions">
		<h4>История транзакций</h4>
		@foreach (var trans in transactions)
		{
			<div class="block">
				<span class="datetime">@trans.TransactionTime</span>
				@if(trans.RecieverIdCard == CardId)
				{
					<span class="money reciever">+ @trans.Money руб.</span>
				}
				else
				{
					<span class="money sender">- @trans.Money руб.</span>
				}
				<span class="name">@trans.Name</span>
			</div>
		}
	</div>
</div>


@code {
	[CascadingParameter] Task<AuthenticationState> auth { get; set; }
	[Parameter]
	public int CardId { get; set; }
	public int Id { get; set; }
	public Transaction transaction = new();
	List<Transaction> transactions = new();
	Card thisCard = new Card();
	private string ErrorMessage { get; set; } = "";
	private DataFormModel DataModel { get; set; } = new();
	private bool isEmail { get; set; } = true;
	private bool IsEmail
	{
		get { return isEmail; }

		set
		{
			isEmail = value;
			DataModel = new();
			ErrorMessage = "";
		}
	}

	public class DataFormModel
	{
		[Required(ErrorMessage = "Поле почта является обязательным.")]
		public string ReceiverEmail { get; set; } = "";
		public List<Card> ReceiverCards { get; set; } = new();
		[Range(1, Int32.MaxValue, ErrorMessage = "Выберите карту.")]
		public int RecieverIdCard { get; set; }

	}

	protected override async Task OnInitializedAsync()
	{
		var authState = await auth;
		if (!authState.User.Identity.IsAuthenticated)
		{
			navManager.NavigateTo("/", true);
		}
		Id = Convert.ToInt32(authState.User.Claims.SingleOrDefault(claim => claim.Type == "Id")?.Value.ToString());
		if((await cardService.GetCards(Id)).FirstOrDefault(card => card.Id == CardId) == null)
		{
			navManager.NavigateTo("/Account", true);
		}
		thisCard = await cardService.GetCard(CardId);
		transactions = await tranService.GetTransactionHistory(CardId);
	}

	private async Task SendMoney()
	{
		if (thisCard.Money < transaction.Money)
		{
			ErrorMessage = "Не достаточно средств!";
			return;
		}
		if (transaction.Money > 0)
		{
			transaction.SenderIdCard = CardId;
			transaction.RecieverIdCard = DataModel.RecieverIdCard;
			transaction.TransactionTime = DateTime.Now;
			var result = await tranService.AddMoneyTransaction(transaction);
			if (result.Success)
			{
				transactions = await tranService.GetTransactionHistory(CardId);
				transaction = new();
			}
			ErrorMessage = result.Message;
		}
	}

	private async Task GetCardsReceiver()
	{
		var result = await cardService.GetCards(DataModel.ReceiverEmail);
		if(result.Count == 0)
		{
			ErrorMessage = "Пользователь не найден!";
		}
		else
		{
			DataModel.ReceiverCards = result;
			ErrorMessage = "";
		}
	}
}

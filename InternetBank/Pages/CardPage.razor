@page "/Card/{cardId:int}"
@using InternetBank.Models
@using System.Security.Claims
@using InternetBank.Services
@inject CardsService cardService
@inject TransactionsService tranService
@inject NavigationManager navManager

<h3>Card</h3>
<h2>@thisCard.Money</h2>
<div style="display:flex;justify-content:left">
	<div style="min-width:fit-content;padding:50px">
		<EditForm Model="@transaction" OnSubmit="SendMoney">
			Card id:<InputNumber @bind-Value="@transaction.RecieverIdCard"></InputNumber><br /><br />
			Money:<InputNumber @bind-Value="@transaction.Money"></InputNumber>
			<button type="submit">Перевести</button>
			<p class="validation-message">@ErrorMessage</p>
		</EditForm>
	</div>
	<div style="padding:20px;min-width:fit-content">
		<h4>Transaction history</h4>
		@foreach (var trans in transactions)
		{
			if (trans.RecieverIdCard == CardId)
			{
				<div style="margin:10px"><span>@trans.TransactionTime</span><span style="margin-left:20px;color:lawngreen">    + @trans.Money</span></div>
			}
			else
			{
				<div style="margin:10px"><span>@trans.TransactionTime</span><span style="margin-left:20px;color:red">    - @trans.Money</span></div>
			}
		}
	</div>
</div>


@code {
	[CascadingParameter] Task<AuthenticationState> auth { get; set; }
	[Parameter]
	public int CardId { get; set; }
	public int Id { get; set; }
	public Transaction transaction = new();
	List<Transaction> transactions = new();
	List<Card> cards = new();
	Card thisCard = new Card();
	private string ErrorMessage { get; set; } = "";

	protected override async Task OnInitializedAsync()
	{
		var authState = await auth;
		if (!authState.User.Identity.IsAuthenticated)
		{
			navManager.NavigateTo("/", true);
		}
		Id = Convert.ToInt32(authState.User.Claims.SingleOrDefault(claim => claim.Type == "Id")?.Value.ToString());
		if((await cardService.GetCards(Id)).FirstOrDefault(card => card.Id == CardId) == null)
		{
			navManager.NavigateTo("/Account", true);
		}
		thisCard = await cardService.GetCard(Id);
		transactions = await tranService.GetTransactionHistory(Id);
	}

	private async Task SendMoney()
	{
		if (transaction.Money > 0)
		{
			transaction.SenderIdCard = CardId;
			transaction.TransactionTime = DateTime.Now;
			var result = await tranService.AddMoneyTransaction(transaction);
			if (result.Success)
			{
				transactions = await tranService.GetTransactionHistory(Id);
				transaction = new();
			}
			ErrorMessage = result.Message;
		}		
	}
}
